#!/bin/bash

SDB_BIN=${BASH_SOURCE[0]}.orig

if [[ ! -x $SDB_BIN ]];then
  echo "$SDB_BIN is not exist" >&2
  exit -1
fi

. ~/.local/bin/color.sh 2>&- ||
  source <(curl -s https://gist.githubusercontent.com/gh4ck3r/1e47a384b5ea2bf537aa364c54ea6811/raw/install-color.sh)

sdb_connect_ctrl=~/.tizen/sdb-connect-ctrl
sdb_get_proxy=~/.tizen/sdb-get-proxy.sh

cmd=${1}
case "$cmd" in
  "dlog")
    declare -A colors=( [V]=$(color bold white)
                        [D]=$(color bold blue)
                        [I]=$(color bold green)
                        [W]=$(color bold yellow)
                        [E]=$(color bold red)
                        [F]=$(color bold white red_bg)
                        [R]=$(color reset));

    exec -a "sdb" $SDB_BIN ${@} | while IFS='' read line; do
      level='unknown';
      if [[ ${line} =~ ^([VDIWEF])([/\(]| P) ]] ||
        [[ ${line} =~ ^\[DLOG\][[:space:]]*[0-9]+\.[0-9]+[[:space:]]([VDIWEF])/ ]] ||
        [[ ${line} =~ ^\[DLOG\][[:space:]]*[0-9]+\.[0-9]+[[:space:]]P\([[:space:]]+[0-9]+\)[[:space:]]+T\([[:space:]]+[0-9]+\)[[:space:]]+([VDIWEF])[[:space:]]+ ]];then
        level=${BASH_REMATCH[1]};
      fi
      color=${colors[$level]};
      echo "${color}$line${color:+${colors[R]}}";
    done
    ;;

  "connect")
    if (( $# == 2 ));then
      if [[ -x "$sdb_get_proxy" ]];then
        host=${2%:*}
        sdb_connect_proxy=$($sdb_get_proxy $host)
        if [[ -n "$sdb_connect_proxy" ]];then
          echo "Use host $(color bold yellow)$sdb_connect_proxy$(color reset) as $(color bold green)proxy$(color reset) for SDB connect"
          port=${2#*:};
          [[ $port = $host ]] && port=26101
          target=$(getent hosts $host | cut -f1 -d' ')
          if ! ssh -S $sdb_connect_ctrl -O check _ 2>/dev/null;then
            ssh -M -S $sdb_connect_ctrl -fnNT \
              -o ExitOnForwardFailure=yes -o ConnectTimeout=2 \
              -L $port:$target:$port $sdb_connect_proxy || exit 1
            set -- $1 localhost:$port
          fi
        fi
      else
        echo "[WARN] '$sdb_get_proxy' is not executable"
      fi
    fi
    $SDB_BIN "$@" $opt_param || (
      ssh -S $sdb_connect_ctrl -O check _ &&
      ssh -S $sdb_connect_ctrl -O exit _) 2>/dev/null ;;

  "disconnect")
      if ssh -S $sdb_connect_ctrl -O check _ 2>/dev/null;then
        echo "Shutdown tunneling"
        ssh -S $sdb_connect_ctrl -O exit _ 2>/dev/null
      fi
      exec -a sdb $SDB_BIN "$@" $opt_param;;

  *)
    if [[ "$cmd" == "shell" ]] && (( $# < 2 ));then
      # Assume .bashrc is planted already
      opt_param="LINES=$(tput lines) COLUMNS=$(tput cols) bash -l";
    fi
    exec -a sdb $SDB_BIN "$@" $opt_param;;
esac
