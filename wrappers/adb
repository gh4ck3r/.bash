#!/bin/bash

ADB_BIN=$(which adb)

if [[ ! -x $ADB_BIN ]];then
  echo "$ADB_BIN is not exist"
  exit -1
fi

if [[ -v SSH_CLIENT ]];then
  HOST_IP=${SSH_CLIENT%% *}
  if nc -zw1 $HOST_IP 5037 2>&1 >/dev/null  ;then
    # Host opened 5037 port
    ADB_HOST="-H $HOST_IP"
    echo -e "Remote ADB server : \033[91;1m$HOST_IP\033[0m" 1>&2
  else
    echo "Host $HOST_IP is not offering adb-server"
    exit -1
  fi
fi

function adb-dumpui()
{
  local dumpWindowHierarchy;
  read -r -d '' dumpWindowHierarchy <<SCRIPT
curl http://localhost:9008/jsonrpc/0 -sd '{"jsonrpc":"2.0","method":"dumpWindowHierarchy","params":[false],"id":0}'
SCRIPT
  local xml=$(adb shell "$dumpWindowHierarchy" | jq -r .result -)

  local testpkg=com.github.uiautomator
  local testinst=$testpkg.test
  if [[ -z $xml ]];then
    function ensure_installed() {
      if ! adb shell "pm list $1| grep $2 >&-";then
        echo -n "install $1 $2 - " >&2
        if ! adb install -r -t -g ~/.bash/tools/"$3";then
          echo "Failed to install $3" >&2
          exit 1;
        fi
      fi
    }
    ensure_installed packages $testpkg app-uiautomator.apk
    ensure_installed instrumentation $testinst app-uiautomator-test.apk

    xml=null; # let instrumentation start at following
  fi

  if [[ $xml == null ]];then
    # port 9008 is closed only when $testpkg is killed
    adb shell am force-stop $testpkg
    adb shell "am instrument -w $testinst 2>&1 >&- &" &
    local inst_pid=$!
    # Wait until RPC port is opened
    local wait_instrumentation;
    adb shell 'while ! netstat -antl | grep ":9008.*LISTEN *$">/dev/null ;do sleep .1;done'
    kill $inst_pid  # kill instrumentation process as it's in a kind of zombie state

    # Retrive xml
    xml=$(adb shell "$dumpWindowHierarchy" | jq -r .result -)
  fi

  echo $xml
  exit 0
}

case ${1} in
  logcat)
    # Append color option only when STDOUT(1) is not redirected
    [[ -t 1 ]] && ADDITIONAL_OPTIONS="-v color"
    ;;
  dumpui)
    adb-dumpui "$@"
    ;;
  tap)
    declare -a coords=()
    for elem in "${@#$1}";do
      [[ -z $elem ]] && continue;
      coords[${#coords[@]}]=$($BASH_SOURCE dumpui |\
        xmllint --xpath "translate(substring-before(substring-after(//node[@text='$elem']/@bounds, '['), ']'), ',', ' ')" -);
    done

    [[ ${#coords[@]} > 0 ]] || exit 1
    declare cmds;
    for c in "${coords[@]}";do
      cmds+="input $1 $c && ";
    done
    cmds="${cmds% && }";

    exec $ADB_BIN $ADB_HOST shell -- $cmds;;
  reset)
    declare -a usbs=(
      $(adb devices -l 2>&- | grep 'device usb:' | while read _ _ path _;do echo $path;done)
    );
    for u in ${usbs[@]};do
      python - <<PYTHON
import os, fcntl;
fd = os.open('$(printf "/dev/bus/usb/%03d/%03d" $(cat /sys/bus/usb/devices/${u#usb:}/{bus,dev}num))', os.O_WRONLY)
fcntl.ioctl(fd, ord('U') << (4*2) | 20, 0)
os.close(fd)
PYTHON
    done
    exit
    ;;
esac

exec -a adb $ADB_BIN $ADB_HOST $1 $ADDITIONAL_OPTIONS ${@#$1}
