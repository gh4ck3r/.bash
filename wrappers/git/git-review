#!/bin/bash

if ! git_dir=$(git rev-parse --git-dir 2>&-);then
  echo "fatal: Not a git repository (or any parent up to mount point $(dirname $PWD))" >&2
  exit 1;
fi

# Remove residual review info which is gone from git configuration
function remove_old_review_info() {
  for _branch in $(git config --name-only --get-regexp 'review\..*\.id'); do
    _branch=${_branch#review.}
    _branch=${_branch%.id}
    # remove review info section from git config if relative branch is gone
    if ! git rev-parse --verity $_branch >/dev/null 2>&1; then
      git config --remove-section review.$_branch
    fi
  done
}
remove_old_review_info

cmd=$(git config review.cmd)
if [[ -z $cmd ]];then
  echo 'Set review command with "git config review.cmd <cmd>" first' >&2;
  exit 2
elif ! type $cmd 2>&1 >/dev/null;then
  echo "Review command $cmd is not executable" >&2;
  exit 3
fi

base_branch=$(git config review.base)
if ! git rev-parse --verify ${base_branch:=master} >/dev/null 2>&1; then
  cat >&2 <<EOF
[ERROR] Base branch for review is not exist -> $base_branch
  set with following command
  $ git config review.base <base-branch-name>
EOF
  exit 4
fi

branch=${branch:-$(git rev-parse --abbrev-ref HEAD 2> /dev/null)}

case $cmd in
  ccollab)
    # following contains meta information of connection with server
    # ~/.smartbear/com.smartbear.ccollab.client.txt
    # loginticketid field will be empty when logged out.

    review_id=$(git config review.$branch.id)

    #commits=( $(git rev-list --reverse ^${base_branch:=master} HEAD) )

    $cmd addgitdiffs ${review_id:-new} $base_branch

    if [[ -z $review_id ]];then
      # set title and custom fields
      declare -a custom_fields
      for field in $(git config --name-only --get-regexp ccollab.custom-fields)
      do
        custom_fields[${#custom_fields[@]}]="'$(git config $field)' "
      done

      # Multiline is not supported replace newline with '\\n'
      #description="$(git log ^trunk HEAD --oneline --reverse | \
      #  cut -f2- -d' ' | \
      #  tr '\n' '\t' | \
      #  sed 's/\t/\\n/g')"
      #custom_fields[${#custom_fields[@]}]="'Review Description=$description' "

      eval $cmd admin review edit last \
        --title "$branch: " \
        --custom-field ${custom_fields[@]}

      # set participants
      $cmd admin review set-participants last --participant \
        $(git config --get-regexp ccollab.participants | \
          sed 's/^.*\.\(\w\+\)\s\(\w\+\)/\2=\1/')

      # Store review id to git config
      review_id=$($cmd admin review-xml last \
        --xpath 'string(//reviews/review/@reviewId)')
      [[ -n $review_id ]] && git config review.$branch.id $review_id
    fi
    ;;
  *)
    echo "Unkonwn review command : $cmd" >&2
    ;;
esac

